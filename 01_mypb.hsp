// INFO ****************************************************
// FileName : 01_mypb.hsp
// Version  : 0.3.1
// Date     : 2022/11/16
// Author   : YUZRANIUM（ゆずらにうむ）
// Twitter  : https://twitter.com/YUZRANIUM
// GitHub   : https://github.com/YUZRANIUM/01_mypb
//**********************************************************
/* Description
user32やgdi32、hsp3utilなどは必要ありません。
このモジュールだけでプログレスバーを設置できます。

不具合報告や要望等はTwitterのDM、
もしくはHSPの掲示板等で頂けると幸いです。

※ 注意 ※
    if文とelse、またはelse:ifの間を空けないようお願い致します。
************************************************************/

#ifndef mypb__
#define global mypb__


#module "MyProgBar"


    /*****  Style  *****/

    #const PBS_SMOOTH           0x0001  // なめらかな表示
    #const PBS_VERTICAL         0x0004  // 垂直プログレスバー
    #const PBS_MARQUEE          0x0008  // マーキーアニメーション
    #const PBS_SMOOTHREVERSE    0x0010  // 減少時もなめらかに
//==============================================================================

    /*****  message  *****/

    #const PBM_SETRANGE32       0x0406  // 最大･最小値の設定(32bit)
    #const PBM_GETRANGE         0x0407  // 最大･最小値の取得

    #const PBM_GETSTEP          0x040D  // 増分値の取得
    #const PBM_SETSTEP          0x0404  // 増分値の設定
    #const PBM_STEPIT           0x0405  // 増分値だけ進める

    #const PBM_GETPOS           0x0408  // 現在位置の取得
    #const PBM_SETPOS           0x0402  // 現在位置の設定
    #const PBM_DELTAPOS         0x0403  // 現在位置の相対設定

    // #const PBM_GETBKCOLOR       0x040E  // 背景色の取得
    // #const PBM_SETBKCOLOR       0x0409  // 背景色の設置
    // #const PBM_GETBARCOLOR      0x040C  // バーの色取得
    // #const PBM_SETBARCOLOR      0x2001  // バーの色設定

    #const PBM_GETSTATE         0x0411  // バーの状態取得
    #const PBM_SETSTATE         0x0410  // バーの状態設定

    #const PBM_SETMARQUEE       0x040A  // マーキーの操作
//==============================================================================

    /*****  Progress Bar status  *****/

    #const PBST_NORMAL          0x0001  // 通常     (緑色)
    #const PBST_ERROR           0x0002  // エラー   (赤色)
    #const PBST_PAUSED          0x0003  // 一時停止 (黄色)
//==============================================================================

    /*****  Color Default  *****/

    // #const CLR_DEFAULT          0xFF000000  // デフォルトカラー
//==============================================================================

    #const MYPB_STYLE0 0x50000000 | PBS_SMOOTH | PBS_SMOOTHREVERSE
    #const MYPB_STYLE1 0x50000000 | PBS_SMOOTH | PBS_SMOOTHREVERSE | PBS_VERTICAL
    #const MYPB_STYLE2 0x50000000 | PBS_SMOOTH | PBS_SMOOTHREVERSE | PBS_MARQUEE



;---------------------------------------
;オブジェクトの設置
;---------------------------------------


// プログレスバーの設置
//
// p1,p2 : Xサイズ, Yサイズ
// p3    : オブジェクトハンドルを受け取る変数
// p4(0) : スタイル
//         0 : 通常
//         1 : 垂直
//         2 : マーキー
#define global mypb(%1,%2,%3,%4=0) mypb_@MyProgBar %1,%2,%3,%4


#deffunc local mypb_ int p1, int p2, var p3, int p4

    if      (p4 == 0) {style = MYPB_STYLE0}
    else:if (p4 == 1) {style = MYPB_STYLE1}
    else:if (p4 == 2) {style = MYPB_STYLE2}

    winobj "msctls_progress32", "", , style, p1, p2
    p3 = objinfo(stat, 2)
    return stat



;---------------------------------------
;オブジェクトの設定
;---------------------------------------


// プログレスバーの設定
//
// p1      : オブジェクトハンドル
// p2(0)   : 最小値(int)
// p3(100) : 最大値(int)
// p4(0)   : 開始位置(int)
// p5(1)   : 1ステップ当たりの変化量(+/-int)
#define global pbset(%1,%2=0,%3=100,%4=0,%5=1) pbset_@MyProgBar %1,%2,%3,%4,%5

#deffunc local pbset_ int p1, int p2, int p3, int p4, int p5
    sendmsg p1, PBM_SETRANGE32, p2, p3
    sendmsg p1, PBM_SETPOS, p4, 0
    sendmsg p1, PBM_SETSTEP, p5, 0
    return



;---------------------------------------
;プログレスバーの実行
;---------------------------------------


// 設定した変化量だけ進める
//
// p1 : オブジェクトハンドル
#deffunc pbstep int p1
    sendmsg p1, PBM_STEPIT, 0, 0
    return


;---------------------------------------
;現在位置
;---------------------------------------


// プログレスバーの位置再設定
//
// p1    : オブジェクトハンドル
// p2    : 新しく設定する位置(int)
// p3(0) : 設定タイプ(0 = 絶対位置, 1 = 相対位置)
#define global pbrepos(%1,%2,%3=0) pbrepos_@MyProgBar %1,%2,%3


#deffunc local pbrepos_ int p1, int p2, int p3

    if      (p3 == 0) {sendmsg p1, PBM_SETPOS, p2, 0}
    else:if (p3 == 1) {sendmsg p1, PBM_DELTAPOS, p2, 0}
    return


;---------------------------------------
;プログレスバーの状態
;---------------------------------------


// プログレスバーの状態設定
//
// p1    : オブジェクトハンドル
// p2(1) : バーの状態
//  1 = PBST_NORMAL (緑色)
//  2 = PBST_ERROR  (赤色)
//  3 = PBST_PAUSED (黄色)
#define global pbsetst(%1,%2=1) pbsetst_@MyProgBar %1,%2


#deffunc local pbsetst_ int p1, int p2
    sendmsg p1, PBM_SETSTATE, p2, 0
    return

;---------------------------------------
;プログレスバーの情報取得
;---------------------------------------


// プログレスバーの範囲（最大値と最小値の差）を返す内部関数
#defcfunc local pbrange_ int p1
    sendmsg p1, PBM_GETRANGE, 0, 0  :  _pmax = stat
    sendmsg p1, PBM_GETRANGE, 1, 0  :  _pmin = stat
    return (_pmax - _pmin)


//プログレスバーの情報取得
//
// p1 : オブジェクトハンドル
// p2 : 取得タイプ
//       0 : 現在位置 (int)
//       1 : 最小値   (int)
//       2 : 最大値   (int)
//       3 : 範  囲   (int)
//       4 : 変化量   (int)
//       5 : 状  態   (int)
#defcfunc pbinfo int p1, int p2

    if      (p2 == 0) {sendmsg p1, PBM_GETPOS, 0, 0}        // 現在位置
    else:if (p2 == 1) {sendmsg p1, PBM_GETRANGE, p2, 0}     // 最小値
    else:if (p2 == 2) {sendmsg p1, PBM_GETRANGE, 0, 0}      // 最大値
    else:if (p2 == 3) {return pbrange_@MyProgBar (p1)}      // 範  囲
    else:if (p2 == 4) {sendmsg p1, PBM_GETSTEP, 0, 0}       // 変化量
    else:if (p2 == 5) {sendmsg p1, PBM_GETSTATE, 0, 0}      // 状  態

    return stat


    /*****  省略型  *****/

    #define global ctype pb_now(%1) pbinfo(%1, 0)          // 現在位置
    #define global ctype pb_min(%1) pbinfo(%1, 1)          // 最小値
    #define global ctype pb_max(%1) pbinfo(%1, 2)          // 最大値
    #define global ctype pb_rag(%1) pbinfo(%1, 3)          // 範  囲
    #define global ctype pb_var(%1) pbinfo(%1, 4)          // 変化量
    #define global ctype pb_sts(%1) pbinfo(%1, 5)          // 状  態



;---------------------------------------
;プログレスバーの配色設定
;---------------------------------------


// プログレスバーの状態配色変更
//
// p1     : オブジェクトハンドル
// p2(25) : 中間域の下限値(int)
// p3(40) : 中間域の上限値(int)
// p4(2)  : 下位域の状態 (PBST_ERROR  (赤色))
// p5(3)  : 中間域の状態 (PBST_PAUSED (黄色))
// p6(1)  : 上位域の状態 (PBST_NORMAL (緑色))
#define global pbstcol(%1,%2=25,%3=40,%4=2,%5=3,%6=1) pbstcol_@MyProgBar %1,%2,%3,%4,%5,%6


#deffunc local pbstcol_ int p1, int p2, int p3, int p4, int p5, int p6

    if      (pb_now(p1) > p3) {pbsetst p1, p6}
    else:if (pb_now(p1) < p2) {pbsetst p1, p4}
    else                      {pbsetst p1, p5}
    return



// プログレスバーの状態配色変更(百分率指定)
//
// p1     : オブジェクトハンドル
// p2(25) : 中間域の下限値(int:百分率)
// p3(40) : 中間域の上限値(int:百分率)
// p4(2)  : 下位域の状態 (PBST_ERROR  (赤色))
// p5(3)  : 中間域の状態 (PBST_PAUSED (黄色))
// p6(1)  : 上位域の状態 (PBST_NORMAL (緑色))
#define global pbstcol2(%1,%2=25,%3=40,%4=2,%5=3,%6=1) pbstcol2_@MyProgBar %1,%2,%3,%4,%5,%6


#deffunc local pbstcol2_ int p1, int p2, int p3, int p4, int p5, int p6

    per = int((absf(pb_now(p1)) / double(pb_rag(p1))) * 100)

    if      (per > p3) {pbsetst p1, p6}
    else:if (per < p2) {pbsetst p1, p4}
    else               {pbsetst p1, p5}
    return



;---------------------------------------
;マーキーの操作
;---------------------------------------

// マーキーの操作
//
// p1     : オブジェクトハンドル
// p2     : マーキー(0 = 停止, 1 = 再生)
// p3(30) : アニメーション更新間隔(ms)
#define global pbswmarq(%1,%2=1,%3=30) pbswmarq_@MyProgBar %1,%2,%3


#deffunc local pbswmarq_ int p1, int p2, int p3
    sendmsg p1, PBM_SETMARQUEE, p2, p3
    return



//##############################################################################
    // インクルードガード
    // #ifndef __USER32__
    // #include "user32.as"
    // #endif //__USER32__


// スタイルの操作
//
// p1 : オブジェクトハンドル
// p2 : 初期スタイル
// p3 : 変更スタイル
// p4 : 切り替えスイッチ
// #deffunc pbstyle_ int p1, int p2, int p3, int p4




    // return


#global
#endif      // mypb__